// Code generated by MockGen. DO NOT EDIT.
// Source: client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendUpgradeRequest mocks base method
func (m *MockClient) SendUpgradeRequest() (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUpgradeRequest")
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUpgradeRequest indicates an expected call of SendUpgradeRequest
func (mr *MockClientMockRecorder) SendUpgradeRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpgradeRequest", reflect.TypeOf((*MockClient)(nil).SendUpgradeRequest))
}

// Close mocks base method
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// IsAvailable mocks base method
func (m *MockClient) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable
func (mr *MockClientMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockClient)(nil).IsAvailable))
}

// GetSetting mocks base method
func (m *MockClient) GetSetting(key string) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetting", key)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetSetting indicates an expected call of GetSetting
func (mr *MockClientMockRecorder) GetSetting(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetting", reflect.TypeOf((*MockClient)(nil).GetSetting), key)
}

// UpdateSetting mocks base method
func (m *MockClient) UpdateSetting(key string, value int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSetting", key, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSetting indicates an expected call of UpdateSetting
func (mr *MockClientMockRecorder) UpdateSetting(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSetting", reflect.TypeOf((*MockClient)(nil).UpdateSetting), key, value)
}

// PING mocks base method
func (m *MockClient) PING() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PING")
	ret0, _ := ret[0].(error)
	return ret0
}

// PING indicates an expected call of PING
func (mr *MockClientMockRecorder) PING() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PING", reflect.TypeOf((*MockClient)(nil).PING))
}

// GET mocks base method
func (m *MockClient) GET(arg0 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GET indicates an expected call of GET
func (mr *MockClientMockRecorder) GET(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockClient)(nil).GET), arg0)
}

// SETTINGS mocks base method
func (m *MockClient) SETTINGS() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SETTINGS")
	ret0, _ := ret[0].(error)
	return ret0
}

// SETTINGS indicates an expected call of SETTINGS
func (mr *MockClientMockRecorder) SETTINGS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SETTINGS", reflect.TypeOf((*MockClient)(nil).SETTINGS))
}

// Connect mocks base method
func (m *MockClient) Connect(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockClientMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClient)(nil).Connect), arg0)
}
