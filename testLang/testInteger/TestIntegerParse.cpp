#include <stdio.h>
#include <unistd.h>
#include <cstdio>
#include <sstream>

//#include "Thread.hpp"
//#include "ArrayList.hpp"
#include "Integer.hpp"
#include "StrongPointer.hpp"
#include "InitializeException.hpp"

using namespace obotcha;

void testIntegerParse() {
   //test hex
   std::string HexTable[100] = {
     "0","1","2","3","4","5","6","7","8",
     "9","a","b","c","d","e","f","10",
     "11","12","13","14","15","16","17","18",
     "19","1a","1b","1c","1d","1e","1f","20",
     "21","22","23","24","25","26","27","28",
     "29","2a","2b","2c","2d","2e","2f","30",
     "31","32","33","34","35","36","37","38",
     "39","3a","3b","3c","3d","3e","3f","40",
     "41","42","43","44","45","46","47","48",
     "49","4a","4b","4c","4d","4e","4f","50",
     "51","52","53","54","55","56","57","58",
     "59","5a","5b","5c","5d","5e","5f","60",
     "61","62","63"
   };

   std::string HexTable_X[100] = {
     "0x0","0x1","0x2","0x3","0x4","0x5","0x6","0x7","0x8",
     "0x9","0xa","0xb","0xc","0xd","0xe","0xf","0x10",
     "0x11","0x12","0x13","0x14","0x15","0x16","0x17","0x18",
     "0x19","0x1a","0x1b","0x1c","0x1d","0x1e","0x1f","0x20",
     "0x21","0x22","0x23","0x24","0x25","0x26","0x27","0x28",
     "0x29","0x2a","0x2b","0x2c","0x2d","0x2e","0x2f","0x30",
     "0x31","0x32","0x33","0x34","0x35","0x36","0x37","0x38",
     "0x39","0x3a","0x3b","0x3c","0x3d","0x3e","0x3f","0x40",
     "0x41","0x42","0x43","0x44","0x45","0x46","0x47","0x48",
     "0x49","0x4a","0x4b","0x4c","0x4d","0x4e","0x4f","0x50",
     "0x51","0x52","0x53","0x54","0x55","0x56","0x57","0x58",
     "0x59","0x5a","0x5b","0x5c","0x5d","0x5e","0x5f","0x60",
     "0x61","0x62","0x63"
   };

   std::string OctTable[100] = {
     "0","1","2","3","4","5","6","7","10",
     "11","12","13","14","15","16","17","20",
     "21","22","23","24","25","26","27","30",
     "31","32","33","34","35","36","37","40",
     "41","42","43","44","45","46","47","50",
     "51","52","53","54","55","56","57","60",
     "61","62","63","64","65","66","67","70",
     "71","72","73","74","75","76","77","100",
     "101","102","103","104","105","106","107","110",
     "111","112","113","114","115","116","117","120",
     "121","122","123","124","125","126","127","130",
     "131","132","133","134","135","136","137","140",
     "141","142","143"
    };

   std::string BinaryTable[100] = {
     "0","1","10","11","100","101","110","111","1000",
     "1001","1010","1011","1100","1101","1110","1111","10000",
     "10001","10010","10011","10100","10101","10110","10111","11000",
     "11001","11010","11011","11100","11101","11110","11111","100000",
     "100001","100010","100011","100100","100101","100110","100111","101000",
     "101001","101010","101011","101100","101101","101110","101111","110000",
     "110001","110010","110011","110100","110101","110110","110111","111000",
     "111001","111010","111011","111100","111101","111110","111111","1000000",
     "1000001","1000010","1000011","1000100","1000101","1000110","1000111","1001000",
     "1001001","1001010","1001011","1001100","1001101","1001110","1001111","1010000",
     "1010001","1010010","1010011","1010100","1010101","1010110","1010111","1011000",
     "1011001","1011010","1011011","1011100","1011101","1011110","1011111","1100000",
     "1100001","1100010","1100011",
   };

   std::string BinaryTable_2[100] = {
     "0b0","0b1","0b10","0b11","0b100","0b101","0b110","0b111","0b1000",
     "0b1001","0b1010","0b1011","0b1100","0b1101","0b1110","0b1111","0b10000",
     "0b10001","0b10010","0b10011","0b10100","0b10101","0b10110","0b10111","0b11000",
     "0b11001","0b11010","0b11011","0b11100","0b11101","0b11110","0b11111","0b100000",
     "0b100001","0b100010","0b100011","0b100100","0b100101","0b100110","0b100111","0b101000",
     "0b101001","0b101010","0b101011","0b101100","0b101101","0b101110","0b101111","0b110000",
     "0b110001","0b110010","0b110011","0b110100","0b110101","0b110110","0b110111","0b111000",
     "0b111001","0b111010","0b111011","0b111100","0b111101","0b111110","0b111111","0b1000000",
     "0b1000001","0b1000010","0b1000011","0b1000100","0b1000101","0b1000110","0b1000111","0b1001000",
     "0b1001001","0b1001010","0b1001011","0b1001100","0b1001101","0b1001110","0b1001111","0b1010000",
     "0b1010001","0b1010010","0b1010011","0b1010100","0b1010101","0b1010110","0b1010111","0b1011000",
     "0b1011001","0b1011010","0b1011011","0b1011100","0b1011101","0b1011110","0b1011111","0b1100000",
     "0b1100001","0b1100010","0b1100011",
   };

   //toString
   while(1) {
     for(int i = 0;i < 100;i++) {
      int v = st(Integer)::parseDecInt(createString(i))->toValue();
      if(v != i) {
          printf("Integer testIntegerParse test1-------[FAIL],index is %d,v is %d \n",i,v);
          break;
      }
     }

     for(int i = 0;i < 100;i++) {
      int v = st(Integer)::parseHexInt(createString(HexTable[i]))->toValue();
      if(v != i) {
          printf("Integer testIntegerParse test2-------[FAIL],index is %d,v is %d \n",i,v);
          break;
      }
     }

     for(int i = 0;i < 100;i++) {
      String hexStr = createString(createString(HexTable[i]))->toUpperCase();
      int v = st(Integer)::parseHexInt(hexStr)->toValue();
      if(v != i) {
          printf("Integer testIntegerParse test2-------[FAIL],index is %d,v is %d \n",i,v);
          break;
      }
     }

     for(int i = 0;i < 100;i++) {
      int v = st(Integer)::parseHexInt(createString(HexTable_X[i]))->toValue();
      if(v != i) {
          printf("Integer testIntegerParse test3-------[FAIL],index is %d,v is %d \n",i,v);
          break;
      }
     }

     for(int i = 0;i < 100;i++) {
      int v = st(Integer)::parseOctInt(createString(OctTable[i]))->toValue();
      if(v != i) {
          printf("Integer testIntegerParse test4-------[FAIL],index is %d,v is %d,str is %s\n",i,v,OctTable[i].c_str());
          break;
      }
     }

     for(int i = 0;i < 100;i++) {
      int v = st(Integer)::parseBinaryInt(createString(BinaryTable[i]))->toValue();
      if(v != i) {
          printf("Integer testIntegerParse test5-------[FAIL],index is %d,v is %d,str is %s \n",i,v,BinaryTable[i].c_str());
          break;
      }

      for(int i = 0;i < 100;i++) {
       int v = st(Integer)::parseBinaryInt(createString(BinaryTable_2[i]))->toValue();
       if(v != i) {
           printf("Integer testIntegerParse test5-------[FAIL],index is %d,v is %d,str is %s \n",i,v,BinaryTable[i].c_str());
           break;
       }
      }

     }

     printf("Integer testIntegerParse test100-------[OK] \n");
     break;
   }


}
